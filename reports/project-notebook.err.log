Traceback (most recent call last):
  File "C:\Users\ADMIN\anaconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\ADMIN\anaconda3\Lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ADMIN\AppData\Roaming\Python\Python312\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ADMIN\anaconda3\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\ADMIN\anaconda3\Lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ADMIN\anaconda3\Lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ADMIN\anaconda3\Lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import sqlite3

# Step 1: Create SQLite database and define schema
connection = sqlite3.connect("loan_data.db")
cursor = connection.cursor()

# Create Person Table
cursor.execute("""
CREATE TABLE IF NOT EXISTS Person (
    person_id INTEGER PRIMARY KEY AUTOINCREMENT,
    person_age INTEGER,
    person_gender TEXT,
    person_education TEXT,
    person_income REAL,
    person_emp_exp INTEGER,
    person_home_ownership TEXT
);
""")

# Create Loan Table
cursor.execute("""
CREATE TABLE IF NOT EXISTS Loan (
    loan_id INTEGER PRIMARY KEY AUTOINCREMENT,
    loan_amnt REAL,
    loan_intent TEXT,
    loan_int_rate REAL,
    loan_percent_income REAL
);
""")

# Create Credit Table
cursor.execute("""
CREATE TABLE IF NOT EXISTS Credit (
    credit_id INTEGER PRIMARY KEY AUTOINCREMENT,
    cb_person_cred_hist_length INTEGER,
    credit_score INTEGER,
    previous_loan_defaults_on_file TEXT
);
""")

# Create Loan Status Table
cursor.execute("""
CREATE TABLE IF NOT EXISTS LoanStatus (
    status_id INTEGER PRIMARY KEY AUTOINCREMENT,
    loan_id INTEGER,
    credit_id INTEGER,
    loan_status INTEGER,
    FOREIGN KEY (loan_id) REFERENCES Loan(loan_id),
    FOREIGN KEY (credit_id) REFERENCES Credit(credit_id)
);
""")

connection.commit()

# Step 2: Insert data into normalized tables
def insert_data():
    with open("loan_data.csv", "r") as file:
        next(file)  # Skip header row
        for line in file:
            # Split the CSV row into individual fields
            fields = line.strip().split(",")
            
            # Extract data for each table
            person_data = (fields[0], fields[1], fields[2], fields[3], fields[4], fields[5])
            loan_data = (fields[6], fields[7], fields[8], fields[9])
            credit_data = (fields[10], fields[11], fields[12])
            loan_status = fields[13]
            
            # Insert data into Person table
            cursor.execute("""
                INSERT INTO Person (person_age, person_gender, person_education, person_income, person_emp_exp, person_home_ownership)
                VALUES (?, ?, ?, ?, ?, ?);
            """, person_data)
            person_id = cursor.lastrowid
            
            # Insert data into Loan table
            cursor.execute("""
                INSERT INTO Loan (loan_amnt, loan_intent, loan_int_rate, loan_percent_income)
                VALUES (?, ?, ?, ?);
            """, loan_data)
            loan_id = cursor.lastrowid
            
            # Insert data into Credit table
            cursor.execute("""
                INSERT INTO Credit (cb_person_cred_hist_length, credit_score, previous_loan_defaults_on_file)
                VALUES (?, ?, ?);
            """, credit_data)
            credit_id = cursor.lastrowid
            
            # Insert data into LoanStatus table
            cursor.execute("""
                INSERT INTO LoanStatus (loan_id, credit_id, loan_status)
                VALUES (?, ?, ?);
            """, (loan_id, credit_id, loan_status))
    
    connection.commit()

# Call the function to insert data
insert_data()

# Step 3: Verify Data Integrity with Queries
def verify_data():
    print("Person Table:")
    for row in cursor.execute("SELECT * FROM Person LIMIT 5;"):
        print(row)

    print("\nLoan Table:")
    for row in cursor.execute("SELECT * FROM Loan LIMIT 5;"):
        print(row)

    print("\nCredit Table:")
    for row in cursor.execute("SELECT * FROM Credit LIMIT 5;"):
        print(row)

    print("\nLoanStatus Table:")
    for row in cursor.execute("""
        SELECT * FROM LoanStatus 
        JOIN Loan ON LoanStatus.loan_id = Loan.loan_id 
        JOIN Credit ON LoanStatus.credit_id = Credit.credit_id 
        LIMIT 5;
    """):
        print(row)

verify_data()

# Close the connection
connection.close()

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [1;32mIn[1], line 99[0m
[0;32m     96[0m     connection[38;5;241m.[39mcommit()
[0;32m     98[0m [38;5;66;03m# Call the function to insert data[39;00m
[1;32m---> 99[0m [43minsert_data[49m[43m([49m[43m)[49m
[0;32m    101[0m [38;5;66;03m# Step 3: Verify Data Integrity with Queries[39;00m
[0;32m    102[0m [38;5;28;01mdef[39;00m [38;5;21mverify_data[39m():

Cell [1;32mIn[1], line 57[0m, in [0;36minsert_data[1;34m()[0m
[0;32m     56[0m [38;5;28;01mdef[39;00m [38;5;21minsert_data[39m():
[1;32m---> 57[0m     [38;5;28;01mwith[39;00m [38;5;28;43mopen[39;49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mloan_data.csv[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mr[39;49m[38;5;124;43m"[39;49m[43m)[49m [38;5;28;01mas[39;00m file:
[0;32m     58[0m         [38;5;28mnext[39m(file)  [38;5;66;03m# Skip header row[39;00m
[0;32m     59[0m         [38;5;28;01mfor[39;00m line [38;5;129;01min[39;00m file:
[0;32m     60[0m             [38;5;66;03m# Split the CSV row into individual fields[39;00m

File [1;32m~\anaconda3\Lib\site-packages\IPython\core\interactiveshell.py:324[0m, in [0;36m_modified_open[1;34m(file, *args, **kwargs)[0m
[0;32m    317[0m [38;5;28;01mif[39;00m file [38;5;129;01min[39;00m {[38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m2[39m}:
[0;32m    318[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    319[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mIPython won[39m[38;5;124m'[39m[38;5;124mt let you open fd=[39m[38;5;132;01m{[39;00mfile[38;5;132;01m}[39;00m[38;5;124m by default [39m[38;5;124m"[39m
[0;32m    320[0m         [38;5;124m"[39m[38;5;124mas it is likely to crash IPython. If you know what you are doing, [39m[38;5;124m"[39m
[0;32m    321[0m         [38;5;124m"[39m[38;5;124myou can use builtins[39m[38;5;124m'[39m[38;5;124m open.[39m[38;5;124m"[39m
[0;32m    322[0m     )
[1;32m--> 324[0m [38;5;28;01mreturn[39;00m [43mio_open[49m[43m([49m[43mfile[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

[1;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'loan_data.csv'

